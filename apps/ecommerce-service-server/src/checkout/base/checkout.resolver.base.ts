/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Checkout } from "./Checkout";
import { CheckoutCountArgs } from "./CheckoutCountArgs";
import { CheckoutFindManyArgs } from "./CheckoutFindManyArgs";
import { CheckoutFindUniqueArgs } from "./CheckoutFindUniqueArgs";
import { CreateCheckoutArgs } from "./CreateCheckoutArgs";
import { UpdateCheckoutArgs } from "./UpdateCheckoutArgs";
import { DeleteCheckoutArgs } from "./DeleteCheckoutArgs";
import { Cart } from "../../cart/base/Cart";
import { CheckoutService } from "../checkout.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Checkout)
export class CheckoutResolverBase {
  constructor(
    protected readonly service: CheckoutService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Checkout",
    action: "read",
    possession: "any",
  })
  async _checkoutsMeta(
    @graphql.Args() args: CheckoutCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Checkout])
  @nestAccessControl.UseRoles({
    resource: "Checkout",
    action: "read",
    possession: "any",
  })
  async checkouts(
    @graphql.Args() args: CheckoutFindManyArgs
  ): Promise<Checkout[]> {
    return this.service.checkouts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Checkout, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Checkout",
    action: "read",
    possession: "own",
  })
  async checkout(
    @graphql.Args() args: CheckoutFindUniqueArgs
  ): Promise<Checkout | null> {
    const result = await this.service.checkout(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Checkout)
  @nestAccessControl.UseRoles({
    resource: "Checkout",
    action: "create",
    possession: "any",
  })
  async createCheckout(
    @graphql.Args() args: CreateCheckoutArgs
  ): Promise<Checkout> {
    return await this.service.createCheckout({
      ...args,
      data: {
        ...args.data,

        cart: args.data.cart
          ? {
              connect: args.data.cart,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Checkout)
  @nestAccessControl.UseRoles({
    resource: "Checkout",
    action: "update",
    possession: "any",
  })
  async updateCheckout(
    @graphql.Args() args: UpdateCheckoutArgs
  ): Promise<Checkout | null> {
    try {
      return await this.service.updateCheckout({
        ...args,
        data: {
          ...args.data,

          cart: args.data.cart
            ? {
                connect: args.data.cart,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Checkout)
  @nestAccessControl.UseRoles({
    resource: "Checkout",
    action: "delete",
    possession: "any",
  })
  async deleteCheckout(
    @graphql.Args() args: DeleteCheckoutArgs
  ): Promise<Checkout | null> {
    try {
      return await this.service.deleteCheckout(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Cart, {
    nullable: true,
    name: "cart",
  })
  @nestAccessControl.UseRoles({
    resource: "Cart",
    action: "read",
    possession: "any",
  })
  async getCart(@graphql.Parent() parent: Checkout): Promise<Cart | null> {
    const result = await this.service.getCart(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
